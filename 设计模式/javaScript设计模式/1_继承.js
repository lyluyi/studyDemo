/*
继承在JavaScript 中 不像在别的面向对象语言中那样简单，JS使用的是基于对象原型链继承，
它可以用来模仿基于类的继承。

在JS中运用设计模式编写代码时，有着极大的创造性，在JS中使用设计模式主要有以下三个原因

1. 可维护性：设计模式有助于降低模块间的耦合程度。这使对代码进行重构和换用不用的模块变得更容易，
也使程序员在大型团队中的工作以及与其他程序员的合作变得更重要

2.沟通： 设计模式为处理不同类型的对象提供了一套通用的术语，比如："工厂模式"；每个模式都有自己的名称

3.性能：某些模式是可以起到优化作用的模式 他们可以大幅度提高程序的运行速度 并减少需要传送到客户端的代码量，
这方面最重要的例子就是享元模式和代理模式

当然，你也可以出于以下两个理由而不使用设计模式
1.复杂性：获得可维护性往往要付出代价，那就是代码可能变得更加复杂，更难被程序设计新手所理解
2.性能： 尽管某些设计模式能提升性能，但多数模式对代码的性能都有所拖累，这种拖累可能微不足道，也可能完全不能接受
这取决于项目的具体需求

实现设计模式比较容易，而懂得应该在什么时候使用设计模式则较为困难。未搞懂设计模式的用途就是盲目套用，是一种不安全的做法
你应该尽量保证所选用的模式就是最恰当的那种，并且不要过度牺牲性能
*/ 

